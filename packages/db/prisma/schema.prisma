// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  phone            String
  altPhone         String?
  firstName        String
  lastName         String
  password         String
  companyName      String
  address          String
  state            String
  pin              String
  country          String
  defaultCurrency  String?
  pan              String
  gst              String?
  nationalId       String

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  accounts         TransactionAccount[]
  headers          Header[]
  tags             Tag[]
  entities         SourceDestinationEntity[]
  transactions     Transaction[]
  budgets          Budget[]
}

model TransactionAccount {
  id               String   @id @default(uuid())
  type             TransactionAccountType
  name             String
  accountNumber    String
  details          String?
  upiLinks         String[]
  status           TransactionAccountStatus
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  owner            User     @relation(fields: [ownerId], references: [id])
  ownerId          String
  transactions     Transaction[]
  budgets          Budget[]
}

enum TransactionAccountType {
  CASH
  BANK_SB
  BANK_CREDIT
  DEMAT
  TRADING
  LOAN
  CREDIT_CARD
  UPI
  OTHER
}

enum TransactionAccountStatus {
  ACTIVE
  FROZEN
  CLOSED
}

model Header {
  id               String   @id @default(uuid())
  name             String   @unique
  details          String?
  status           HeaderStatus
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  owner            User     @relation(fields: [ownerId], references: [id])
  ownerId          String
  transactions     Transaction[]
  budgets          Budget[]
}

enum HeaderStatus {
  ACTIVE
  NOT_ACTIVE
}

model Tag {
  id               String   @id @default(uuid())
  name             String
  details          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  owner            User     @relation(fields: [ownerId], references: [id])
  ownerId          String
  transactions     Transaction[]
  budgets          Budget[]
}

model SourceDestinationEntity {
  id               String   @id @default(uuid())
  name             String
  gst              String
  pan              String
  address          String
  state            String
  pin              String
  country          String
  nationalId       String
  details          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  owner            User     @relation(fields: [ownerId], references: [id])
  ownerId          String
  transactions     Transaction[]
  budgets          Budget[]
}

model Transaction {
  id               String   @id @default(uuid())
  amount           Int
  type             TransactionType
  details          String?
  transferId       String?
  status           TransactionStatus
  transactionDate  DateTime
  entryDate        DateTime @default(now())

  account          TransactionAccount @relation(fields: [accountId], references: [id])
  accountId        String

  header           Header             @relation(fields: [headerId], references: [id])
  headerId         String

  tag              Tag                @relation(fields: [tagId], references: [id])
  tagId            String

  entity           SourceDestinationEntity @relation(fields: [entityId], references: [id])
  entityId         String

  budget           Budget?             @relation(fields: [budgetId], references: [id])
  budgetId         String?

  owner            User                @relation(fields: [ownerId], references: [id])
  ownerId          String

  receipts         TransactionReceipt[]

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  COMPLETE
  PENDING
}

model TransactionReceipt {
  id                String   @id @default(uuid())
  blobName          String
  container         String
  mimeType          String
  size              Int
  originalName      String
  receiptUploadedAt DateTime @default(now())

  transaction   Transaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Budget {
  id               String   @id @default(uuid())
  amount           Float
  type             BudgetType
  details          String?
  status           BudgetStatus
  transferId       String?
  transactionDate  DateTime
  entryDate        DateTime @default(now())

  account          TransactionAccount @relation(fields: [accountId], references: [id])
  accountId        String

  header           Header            @relation(fields: [headerId], references: [id])
  headerId         String

  tag              Tag               @relation(fields: [tagId], references: [id])
  tagId            String

  entity           SourceDestinationEntity @relation(fields: [entityId], references: [id])
  entityId         String

  owner            User               @relation(fields: [ownerId], references: [id])
  ownerId          String

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  transactions     Transaction[]
}

enum BudgetType {
  CREDIT
  DEBIT
}

enum BudgetStatus {
  COMPLETE_EXACT
  COMPLETE_UNDERPAID
  COMPLETE_OVERPAID
  PARTIALLY_PAID
  STALLED
  CANCELLED
  UNDER_PROCESS
}

model ApiCallLog {
  id               String   @id @default(uuid())
  userId           String?
  endpoint         String
  method           String
  requestPayload   Json
  responsePayload  Json
  ipAddress        String
  statusCode       Int
  errorMessage     String?
  errorSource      String?
  sessionId        String?
  timestamp        DateTime @default(now())
  processingTime   Int
}
